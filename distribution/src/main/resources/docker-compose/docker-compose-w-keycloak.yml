# In the live-ingester and prediction-applier services, you need to set the following environment variables:
#      AUTH_PROVIDERS_HYLANDEXPERIENCE_CLIENTID
#      AUTH_PROVIDERS_HYLANDEXPERIENCE_CLIENTSECRET
#      AUTH_PROVIDERS_HYLANDEXPERIENCE_ENVIRONMENTKEY
#      AUTH_PROVIDERS_HYLANDEXPERIENCE_TOKENURI
#      AUTH_PROVIDERS_ALFRESCO_USERNAME
#      AUTH_PROVIDERS_ALFRESCO_PASSWORD

services:
  alfresco:
    extends:
      file: docker-compose.yml
      service: alfresco
    environment:
      JAVA_OPTS: "
        -Ddb.driver=org.postgresql.Driver
        -Ddb.username=alfresco
        -Ddb.password=alfresco
        -Ddb.url=jdbc:postgresql://postgres:5432/alfresco
        -Dindex.subsystem.name=elasticsearch
        -Delasticsearch.host=elasticsearch
        -Delasticsearch.createIndexIfNotExists=true
        -Delasticsearch.indexName=alfresco
        -Dshare.host=localhost
        -Dshare.port=8080
        -Dalfresco.host=localhost
        -Dalfresco.port=8080
        -Daos.baseUrlOverwrite=http://localhost:8080/alfresco/aos
        -Dmessaging.broker.url=\"failover:(nio://activemq:61616)?timeout=3000&jms.useCompression=true\"
        -Ddeployment.method=DOCKER_COMPOSE
        -Dtransform.service.enabled=true
        -Dtransform.service.url=http://transform-router:8095
        -Dsfs.url=http://shared-file-store:8099
        -DlocalTransform.core-aio.url=http://transform-core-aio:8090
        -Dalfresco-pdf-renderer.url=http://transform-core-aio:8090
        -Djodconverter.url=http://transform-core-aio:8090
        -Dimg.url=http://transform-core-aio:8090
        -Dtika.url=http://transform-core-aio:8090
        -Dtransform.misc.url=http://transform-core-aio:8090
        -Dcsrf.filter.enabled=false
        -Dauthentication.chain=identity-service1:identity-service,alfrescoNtlm1:alfrescoNtlm
        -Didentity-service.authentication.validation.failure.silent=false
        -Didentity-service.enable-basic-auth=true
        -Didentity-service.authentication.enabled=true
        -Didentity-service.auth-server-url=http://auth-provider:8080/auth
        -Didentity-service.realm=alfresco
        -Didentity-service.resource=alfresco
        -Dhxi.discovery.base-url=http://hxinsight-mock:8080
        -Dhxi.auth.providers.hyland-experience.token-uri=http://hxinsight-mock:8080/token
        -Xms1500m -Xmx1500m
        "

  postgres:
    extends:
      file: docker-compose.yml
      service: postgres

  activemq:
    extends:
      file: docker-compose.yml
      service: activemq

  transform-router:
    extends:
      file: docker-compose.yml
      service: transform-router

  transform-core-aio:
    extends:
      file: docker-compose.yml
      service: transform-core-aio

  shared-file-store:
    extends:
      file: docker-compose.yml
      service: shared-file-store

  share:
    extends:
      file: docker-compose.yml
      service: share

  digital-workspace:
    extends:
      file: docker-compose.yml
      service: digital-workspace
    environment:
      APP_CONFIG_AUTH_TYPE: OAUTH
      APP_CONFIG_OAUTH2_HOST: http://localhost:8080/auth/realms/alfresco
      APP_CONFIG_OAUTH2_CLIENTID: alfresco
      APP_CONFIG_OAUTH2_IMPLICIT_FLOW: true
      APP_CONFIG_OAUTH2_SILENT_LOGIN: true
      APP_CONFIG_OAUTH2_REDIRECT_LOGIN: /workspace
      APP_CONFIG_OAUTH2_REDIRECT_LOGOUT: /workspace
      APP_CONFIG_OAUTH2_REDIRECT_SILENT_IFRAME_URI: http://localhost:8080/workspace/assets/silent-refresh.html
      APP_CONFIG_OAUTH2_REQUIRE_HTTPS: false
      API_URL: http://localhost:8080

  control-center:
    extends:
      file: docker-compose.yml
      service: control-center
    environment:
      APP_CONFIG_AUTH_TYPE: OAUTH
      APP_CONFIG_OAUTH2_HOST: http://localhost:8080/auth/realms/alfresco
      APP_CONFIG_OAUTH2_CLIENTID: alfresco
      APP_CONFIG_OAUTH2_IMPLICIT_FLOW: true
      APP_CONFIG_OAUTH2_SILENT_LOGIN: true
      APP_CONFIG_OAUTH2_REDIRECT_LOGIN: /workspace
      APP_CONFIG_OAUTH2_REDIRECT_LOGOUT: /workspace
      APP_CONFIG_OAUTH2_REDIRECT_SILENT_IFRAME_URI: http://localhost:8080/workspace/assets/silent-refresh.html
      APP_CONFIG_OAUTH2_REQUIRE_HTTPS: false

  proxy:
    image: nginx:stable-alpine
    deploy:
      resources:
        limits:
          memory: 128m
    depends_on:
      - alfresco
      - digital-workspace
      - control-center
      - share
      - auth-provider
    ports:
      - "8080:8080"
    links:
      - alfresco
      - digital-workspace
      - control-center
      - share
      - auth-provider
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf

  elasticsearch:
    extends:
      file: docker-compose.yml
      service: elasticsearch

  reindexing:
    extends:
      file: docker-compose.yml
      service: reindexing

  live-indexing:
    extends:
      file: docker-compose.yml
      service: live-indexing

  live-ingester:
    extends:
      file: docker-compose.yml
      service: live-ingester
    environment:
      AUTH_PROVIDERS_ALFRESCO_TYPE: oauth2
      AUTH_PROVIDERS_ALFRESCO_CLIENTID: alfresco
      AUTH_PROVIDERS_ALFRESCO_CLIENTSECRET:
      AUTH_PROVIDERS_ALFRESCO_GRANTTYPE: password
      AUTH_PROVIDERS_ALFRESCO_TOKENURI: http://auth-provider:8080/auth/realms/alfresco/protocol/openid-connect/token
      AUTH_PROVIDERS_ALFRESCO_USERNAME: admin
      AUTH_PROVIDERS_ALFRESCO_PASSWORD: admin

  bulk-ingester:
    extends:
      file: docker-compose.yml
      service: bulk-ingester

  prediction-applier:
    extends:
      file: docker-compose.yml
      service: prediction-applier
    environment:
      AUTH_PROVIDERS_ALFRESCO_TYPE: oauth2
      AUTH_PROVIDERS_ALFRESCO_CLIENTID: alfresco
      AUTH_PROVIDERS_ALFRESCO_CLIENTSECRET:
      AUTH_PROVIDERS_ALFRESCO_GRANTTYPE: password
      AUTH_PROVIDERS_ALFRESCO_TOKENURI: http://auth-provider:8080/auth/realms/alfresco/protocol/openid-connect/token
      AUTH_PROVIDERS_ALFRESCO_USERNAME: admin
      AUTH_PROVIDERS_ALFRESCO_PASSWORD: admin

  hxinsight-mock:
    extends:
      file: docker-compose.yml
      service: hxinsight-mock

  aws-mock:
    extends:
      file: docker-compose.yml
      service: aws-mock

  auth-provider:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_TAG}
    deploy:
      resources:
        limits:
          memory: 512m
    depends_on:
      - auth-provider-db
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://auth-provider-db:5433/keycloak
      KC_DB_USER: keycloak
      KC_DB_PASSWORD: keycloak
    command: ["start-dev", "--import-realm", "--http-relative-path=/auth", "--hostname=localhost", "--http-enabled=true"]
    volumes:
      - ./realms:/opt/keycloak/data/import
    ports:
      - "8999:8080"

  auth-provider-db:
    image: postgres:${POSTGRES_TAG}
    deploy:
      resources:
        limits:
          memory: 512m
    environment:
      POSTGRES_PASSWORD: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_DB: keycloak
      PGPORT: 5433
    command: postgres -c max_connections=300 -c log_min_messages=LOG
    ports:
      - "5433:5433"

volumes:
  shared-file-store-volume:
    driver_opts:
      type: tmpfs
      device: tmpfs
